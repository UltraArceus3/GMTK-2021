[gd_resource type="ShaderMaterial" load_steps=15 format=2]

[ext_resource path="res://textures/circle.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarFunc" id=1]
output_port_for_preview = 0
function = 2

[sub_resource type="VisualShaderNodeVectorOp" id=2]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
function = 9

[sub_resource type="VisualShaderNodeColorOp" id=4]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 0, 0 ) ]
operator = 4

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
function = 12

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="OpenSimplexNoise" id=5]
octaves = 9
period = 18.4
persistence = 0.361
lacunarity = 4.0

[sub_resource type="NoiseTexture" id=6]
seamless = true
noise = SubResource( 5 )

[sub_resource type="VisualShaderNodeTexture" id=7]
output_port_for_preview = 0
texture = SubResource( 6 )

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeTexture" id=9]
output_port_for_preview = 1
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "time"

[sub_resource type="VisualShader" id=11]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3;
uniform sampler2D tex_frg_8;



void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(SCREEN_UV, 0.0);

// Input:9
	float n_out9p0 = TIME;

// ScalarOp:15
	float n_in15p1 = 2.00000;
	float n_out15p0 = n_out9p0 * n_in15p1;

// ScalarFunc:10
	float n_out10p0 = tan(n_out15p0);

// ScalarFunc:14
	float n_out14p0 = abs(n_out10p0);

// ScalarFunc:12
	float n_out12p0 = log(n_out14p0);

// VectorOp:11
	vec3 n_out11p0 = n_out4p0 * vec3(n_out12p0);

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out11p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// ColorOp:13
	vec3 n_in13p1 = vec3(1.00000, 0.00000, 0.00000);
	vec3 n_out13p0;
	{
		float base = n_out3p0.x;
		float blend = n_in13p1.x;
		if (base < 0.5) {
			n_out13p0.x = 2.0 * base * blend;
		} else {
			n_out13p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.y;
		float blend = n_in13p1.y;
		if (base < 0.5) {
			n_out13p0.y = 2.0 * base * blend;
		} else {
			n_out13p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.z;
		float blend = n_in13p1.z;
		if (base < 0.5) {
			n_out13p0.z = 2.0 * base * blend;
		} else {
			n_out13p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Texture:8
	vec4 tex_frg_8_read = texture(tex_frg_8, UV.xy);
	vec3 n_out8p0 = tex_frg_8_read.rgb;
	float n_out8p1 = tex_frg_8_read.a;

// Output:0
	COLOR.rgb = n_out13p0;
	COLOR.a = n_out8p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -665.578, 52.4037 )
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( -80, 0 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( -620, 220 )
nodes/fragment/8/node = SubResource( 9 )
nodes/fragment/8/position = Vector2( 340, 440 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( -620, 360 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -600, 500 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -300, 140 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -160, 460 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 200, 220 )
nodes/fragment/14/node = SubResource( 12 )
nodes/fragment/14/position = Vector2( -280, 560 )
nodes/fragment/15/node = SubResource( 13 )
nodes/fragment/15/position = Vector2( -440, 400 )
nodes/fragment/connections = PoolIntArray( 8, 1, 0, 1, 4, 0, 11, 0, 11, 0, 3, 0, 12, 0, 11, 1, 3, 0, 13, 0, 13, 0, 0, 0, 14, 0, 12, 0, 9, 0, 15, 0, 15, 0, 10, 0, 10, 0, 14, 0 )

[resource]
shader = SubResource( 11 )
